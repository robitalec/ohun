stop2("The function is not defined for class 'extended_selection_table'. Use 'selection_table' or 'data.frame' instea.")
internal_feature_reference <- function(reference, path = NULL, total.annotations = FALSE){
reference$duration <- reference$end - reference$start
reference <- warbleR::gaps(X = reference, pb = FALSE)
count_annotations <- table(reference$sound.files)
output <- data.frame(min.sel.duration = min(reference$duration, na.rm = TRUE))
output$mean.sel.duration <- mean(reference$duration, na.rm = TRUE)
output$max.sel.duration <- max(reference$duration, na.rm = TRUE)
suppressWarnings(output$min.gap.duration <- min(reference$gaps, na.rm = TRUE))
suppressWarnings(output$mean.gap.duration <- mean(reference$gaps, na.rm = TRUE))
suppressWarnings(output$max.gap.duration <- max(reference$gaps, na.rm = TRUE))
if (total.annotations)
output$annotations <- nrow(reference) else
{
output$min.annotations <- min(count_annotations)
output$mean.annotations <- mean(count_annotations)
output$max.annotations <- max(count_annotations)}
# frequency range descriptors
if (!is.null(reference$bottom.freq) & !is.null(reference$top.freq)){
output$min.bottom.freq <- min(reference$bottom.freq, na.rm = TRUE)
output$mean.bottom.freq <- mean(reference$bottom.freq, na.rm = TRUE)
output$max.bottom.freq <- max(reference$bottom.freq, na.rm = TRUE)
output$min.top.freq <- min(reference$top.freq, na.rm = TRUE)
output$mean.top.freq <- mean(reference$top.freq, na.rm = TRUE)
output$max.top.freq <- max(reference$top.freq, na.rm = TRUE)
}
if (!is.null(path)){
durs <- warbleR::duration_sound_files(files = unique(reference$sound.files), path = path)
durs$duty.cycle <- sapply(1:nrow(durs), function(x)
sum(reference$duration[reference$sound.files == durs$sound.files[x]], na.rm = TRUE) / durs$duration[x]
)
output$min.duty.cycle <- min(durs$duty.cycle, na.rm = TRUE)
output$mean.duty.cycle <- mean(durs$duty.cycle, na.rm = TRUE)
output$max.duty.cycle <- max(durs$duty.cycle, na.rm = TRUE)
# measure peak amplitude
peak_amp <- warbleR::sound_pressure_level(reference, type = "peak", path = path, pb = FALSE)
output$min.peak.amplitude <- min(peak_amp$peak.amplitude, na.rm = TRUE)
output$mean.peak.amplitude <- mean(peak_amp$peak.amplitude, na.rm = TRUE)
output$max.peak.amplitude <- max(peak_amp$peak.amplitude, na.rm = TRUE)
}
return(output)
}
# force by.sound.files if only 1 sound file in reference
if (length(unique(reference$sound.files)) == 1)
by.sound.file <- TRUE
if (!by.sound.file)
output <- internal_feature_reference(reference, path, total.annotations = FALSE) else {
output_list <- lapply(unique(reference$sound.files), function(x){
sub_output <- internal_feature_reference(reference = reference[reference$sound.files == x, ], path, total.annotations = TRUE)
sub_output$sound.files <- x
return(sub_output)
})
output <- do.call(rbind, output_list)
output$mean.gap.duration[is.infinite(output$mean.gap.duration) | is.nan(output$mean.gap.duration)] <- NA
output$min.gap.duration[is.infinite(output$min.gap.duration) | is.nan(output$min.gap.duration)] <- NA
# order columns
output <- output[, c(ncol(output), 1:(ncol(output) - 1))]
}
x <- unique(reference$sound.files)[1]
x
sub_output <- internal_feature_reference(reference = reference[reference$sound.files == x, ], path, total.annotations = TRUE)
reference = reference[reference$sound.files == x, ]
total.annotations = TRUE
reference$duration <- reference$end - reference$start
reference <- warbleR::gaps(X = reference, pb = FALSE)
count_annotations <- table(reference$sound.files)
output <- data.frame(min.sel.duration = min(reference$duration, na.rm = TRUE))
output$mean.sel.duration <- mean(reference$duration, na.rm = TRUE)
output$max.sel.duration <- max(reference$duration, na.rm = TRUE)
suppressWarnings(output$min.gap.duration <- min(reference$gaps, na.rm = TRUE))
suppressWarnings(output$mean.gap.duration <- mean(reference$gaps, na.rm = TRUE))
suppressWarnings(output$max.gap.duration <- max(reference$gaps, na.rm = TRUE))
if (total.annotations)
output$annotations <- nrow(reference) else
{
output$min.annotations <- min(count_annotations)
output$mean.annotations <- mean(count_annotations)
output$max.annotations <- max(count_annotations)}
# frequency range descriptors
if (!is.null(reference$bottom.freq) & !is.null(reference$top.freq)){
output$min.bottom.freq <- min(reference$bottom.freq, na.rm = TRUE)
output$mean.bottom.freq <- mean(reference$bottom.freq, na.rm = TRUE)
output$max.bottom.freq <- max(reference$bottom.freq, na.rm = TRUE)
output$min.top.freq <- min(reference$top.freq, na.rm = TRUE)
output$mean.top.freq <- mean(reference$top.freq, na.rm = TRUE)
output$max.top.freq <- max(reference$top.freq, na.rm = TRUE)
}
if (!is.null(path)){
durs <- warbleR::duration_sound_files(files = unique(reference$sound.files), path = path)
durs$duty.cycle <- sapply(1:nrow(durs), function(x)
sum(reference$duration[reference$sound.files == durs$sound.files[x]], na.rm = TRUE) / durs$duration[x]
)
output$min.duty.cycle <- min(durs$duty.cycle, na.rm = TRUE)
output$mean.duty.cycle <- mean(durs$duty.cycle, na.rm = TRUE)
output$max.duty.cycle <- max(durs$duty.cycle, na.rm = TRUE)
# measure peak amplitude
peak_amp <- warbleR::sound_pressure_level(reference, type = "peak", path = path, pb = FALSE)
output$min.peak.amplitude <- min(peak_amp$peak.amplitude, na.rm = TRUE)
output$mean.peak.amplitude <- mean(peak_amp$peak.amplitude, na.rm = TRUE)
output$max.peak.amplitude <- max(peak_amp$peak.amplitude, na.rm = TRUE)
}
peak_amp
source("~/Dropbox/R_package_testing/ohun/R/feature_reference.R")
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# by sound file
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE)
# by  sound file and including path
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE, path = tempdir())
# by  sound file and including path
feature_reference(reference = lbh_reference, by.sound.file = TRUE, path = tempdir())
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
WikiAves_get_taxons_json <- function (term)
{
jsonlite::fromJSON(URLencode(glue::glue("https://www.wikiaves.com.br/getTaxonsJSON.php?term={term}")))
}
WikiAves_get_regs_json <- function(id, p = 1, tm = c("s", "f"), t = "s"){
fromJSON_safe <- purrr::possibly(jsonlite::fromJSON, list(registros = list(titulo = "", link = "", total = "", itens = list(itens = ""))))
fromJSON_safe(glue::glue("https://www.wikiaves.com.br/getRegistrosJSON.php?tm={tm[1]}&t={t}&s={id}&o=mp&p={p}")) %>%
purrr::pluck("registros") %>%
purrr::map_if(is.null, ~"") %>%
tibble::as_tibble() %>%
dplyr::mutate(itens = purrr::map(itens, as.data.frame, stringsAsFactors = FALSE)) %>%
dplyr::select(-link) %>%
tidyr::unnest_wider(itens)
}
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, wa_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
return(wa_metadataa)
}
WikiAves_get_taxons_json("cyanoleuca")
WikiAves_get_regs_json("cyanoleuca")
library(dplyr)
WikiAves_get_regs_json("cyanoleuca")
# install.packages("remotes")
remotes::install_github("Athospd/wikiaves")
library(wikiaves)
birds_metadata <- wa_metadata("cyanoleuca")
wa_metadataa("cyanoleuca")
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, wa_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- function(tibble::tibble(
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, wa_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
return(wa_metadataa)
}
wa_metadata("cyanoleuca")
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, WikiAves_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
return(wa_metadataa)
}
wa_metadata("cyanoleuca")
library(ohun)
setwd("~/Documents/EnderV3Pro")
wa_download <- function(wa_metadata, path = getwd(), sys_sleep = 0.0001, force = FALSE) {
purrr::walk2(wa_metadata$mp3_link, wa_metadata$mp3_name, ~{
pb$tick()
Sys.sleep(sys_sleep)
file_path <- glue::glue("{path}/{.y}")
if(!is.na(.x) & (force | !file.exists(file_path) | dplyr::near(file.size(file_path), 0))) {
httr::GET(.x, httr::write_disk(file_path, overwrite = TRUE))
}
})
return(invisible(wa_metadata))
}
wa_download <- function(wa_metadataa, path = getwd(), sys_sleep = 0.0001, force = FALSE) {
purrr::walk2(wa_metadataa$mp3_link, wa_metadataa$mp3_name, ~{
pb$tick()
Sys.sleep(sys_sleep)
file_path <- glue::glue("{path}/{.y}")
if(!is.na(.x) & (force | !file.exists(file_path) | dplyr::near(file.size(file_path), 0))) {
httr::GET(.x, httr::write_disk(file_path, overwrite = TRUE))
}
})
return(invisible(wa_metadataa))
}
me <- wa_metadata("cyanoleuca")
wa_download(me)
me
wa_download <- function(wa_metadataa, path = getwd(), sys_sleep = 0.0001, force = FALSE) {
dplyr::mutate(
mp3_name = glue::glue(mp3_file_name) %>% stringr::str_replace(" ", "-"),
mp3_link = link %>% stringr::str_replace("jpg$", "mp3") %>% stringr::str_replace("#_", "_")
)
purrr::walk2(wa_metadataa$mp3_link, wa_metadataa$mp3_name, ~{
pb$tick()
Sys.sleep(sys_sleep)
file_path <- glue::glue("{path}/{.y}")
if(!is.na(.x) & (force | !file.exists(file_path) | dplyr::near(file.size(file_path), 0))) {
httr::GET(.x, httr::write_disk(file_path, overwrite = TRUE))
}
})
return(invisible(wa_metadataa))
}
wa_download(me)
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, WikiAves_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
dplyr::mutate(
mp3_name = glue::glue(mp3_file_name) %>% stringr::str_replace(" ", "-"),
mp3_link = link %>% stringr::str_replace("jpg$", "mp3") %>% stringr::str_replace("#_", "_")
)
return(wa_metadataa)
}
wa_metadata("cyanoleuca")
wa_metadata("cyanoleuca")
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, WikiAves_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
#dplyr::mutate(
#mp3_name = glue::glue(mp3_file_name) %>% stringr::str_replace(" ", "-"),
#mp3_link = link %>% stringr::str_replace("jpg$", "mp3") %>% stringr::str_replace("#_", "_")
)
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, WikiAves_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
#dplyr::mutate(
#mp3_name = glue::glue(mp3_file_name) %>% stringr::str_replace(" ", "-"),
#mp3_link = link %>% stringr::str_replace("jpg$", "mp3") %>% #stringr::str_replace("#_", "_")
)
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, WikiAves_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
)
wa_metadata <- function(
term,
tm = c("s", "f"),
verbose = TRUE,
download = FALSE,
path = getwd(),
mp3_file_name = "{label}-{id}.mp3",
parallel = 1,
metadata_sys_sleep = 0.1,
download_sys_sleep = 0.0001,
force = FALSE
) {
wa_metadataa <- tibble::tibble(
terma = term
) %>%
dplyr::mutate(
taxonomy = as.data.frame(purrr::map(terma, WikiAves_get_taxons_json)
)) %>%
tidyr::unnest(taxonomy) %>%
dplyr::rename(species_id = id) %>%
dplyr::distinct(species_id, .keep_all = TRUE)
return(wa_metadataa)
}
wa_metadata("cyanoleuca")
WikiAves_get_taxons_json <- function (term)
{
jsonlite::fromJSON(URLencode(glue::glue("https://www.wikiaves.com.br/getTaxonsJSON.php?term={term}")))
}
WikiAves_get_regs_json <- function(id, p = 1, tm = c("s", "f"), t = "s"){
fromJSON_safe <- purrr::possibly(jsonlite::fromJSON, list(registros = list(titulo = "", link = "", total = "", itens = list(itens = ""))))
fromJSON_safe(glue::glue("https://www.wikiaves.com.br/getRegistrosJSON.php?tm={tm[1]}&t={t}&s={id}&o=mp&p={p}")) %>%
purrr::pluck("registros") %>%
purrr::map_if(is.null, ~"") %>%
tibble::as_tibble() %>%
dplyr::mutate(itens = purrr::map(itens, as.data.frame, stringsAsFactors = FALSE)) %>%
dplyr::select(-link) %>%
tidyr::unnest_wider(itens)
}
WikiAves_get_regs_json(id = 11482)
a <- WikiAves_get_regs_json(id = 11482)
View(a)
a$link
a$link[1]
wget(https://www.wikiaves.com.br/wiki/andorinha-pequena-de-casa?mp3=*.mp3)
wget("https://www.wikiaves.com.br/wiki/andorinha-pequena-de-casa?mp3=*.mp3")
install.packages(HelpersMG)
install.packages("HelpersMG")
library(HelpersMG)
wget("https://www.wikiaves.com.br/wiki/andorinha-pequena-de-casa?mp3=*.mp3")
wget("https://s3.amazonaws.com/media.wikiaves.com.br/recordings/531/135462_a59a25ae326ea52f5c8d85e154688dbc.mp3")
library(XML)
url <- "https://www.wikiaves.com.br/wiki/andorinha-pequena-de-casa"
doc <- htmlParse(url)
View(doc)
wget -r -P ~/Documents/EnderV3Pro -A mp3 https://www.wikiaves.com.br/wiki/andorinha-pequena-de-casa
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
devtools::install()
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
#built site
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgdown::build_site(lazy = FALSE, preview = TRUE, examples = FALSE)
pkgcheck::use_github_action_pkcheck()
install.packages("pkgcheck")
options (repos = c (
ropenscireviewtools = "https://ropensci-review-tools.r-universe.dev",
CRAN = "https://cloud.r-project.org"
))
install.packages("pkgcheck")
pkgcheck::use_github_action_pkcheck()
pkgcheck::use_github_action_pkgcheck()
pkgcheck::use_github_action_pkgcheck()
rlang::last_error()
rlang::last_trace()
usethis::use_coverage()
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
## pckgcheck
x <- pkgcheck (".")
library (pkgcheck)
## pckgcheck
x <- pkgcheck::pkgcheck(".")
