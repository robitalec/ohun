t3 <- t3 * 0.25
et4 <- env(t3, envt = "hil", norm = FALSE, colwave = "red", plot = FALSE)
cor(et2, et4)
plot(et2[, 1], type = "l")
lines(et3[, 1], type = "l", col = "green")
lines(et4[, 1], type = "l", col = "red")
plot(et2[,1], et[,3])
plot(et2[,1], et3[, 1])
plot(et2[,1], et4[, 1])
plot(et2[,1], et3[, 1])
plot(et2[,1], et4[, 1])
et3[5000:6000] <- sample(et3[, 1], size = 1001) / 3
et2 <- et2 / sum(et2)
et3 <- et3 / sum(et3)
range(et2[, 1])
range(et3[, 1])
plot(et2[, 1], type = "l")
lines(et3[, 1], type = "l", col = "red")
sum(et3)
plot(et2[,1], et3[, 1])
rms(et2)
rms(et3)
rms(et4)
et2 <- env(t2, envt = "hil", norm = FALSE, colwave = "gray", plot = FALSE)
t3 <- t2
et3 <- env(t3, envt = "hil", norm = FALSE, colwave = "red", plot = FALSE)
cor(et2, et3)
rms(et2)
t3 <- t3 * 0.25
et4 <- env(t3, envt = "hil", norm = FALSE, colwave = "red", plot = FALSE)
rms(et4)
rms(et2)/  rms(et4)
cor(et2, et3)
cor(et2, et4)
plot(et2[, 1], type = "l")
plot(et2[,1], et3[, 1])
plot(et2[,1], et4[, 1])
plot(et2[,1], et3[, 1])
plot(et2[,1], et4[, 1])
spectro(tico)
t2 <-  cutw(tico, from = 0.5, to = 0.9, output = "Wave")
et2 <- env(t2, envt = "hil", norm = FALSE, colwave = "gray", plot = TRUE)
dev.off()
et2 <- env(t2, envt = "hil", norm = FALSE, colwave = "gray", plot = TRUE)
meanspec(t2)
ms <- meanspec(t2)
rms(ms[,1])
ms[,1]/ sum(ms[,1])
remove.packages("ohun")
#
# #restart R
.rs.restartR()
# devtools::install()
x <- c("devtools", "fftw", "seewave", "pbapply", "RCurl", "rjson", "microbenchmark", "pkgdown", "warbleR")
aa <- lapply(x, function(y){
if(!y %in% installed.packages()[,"Package"])  {if(y != "warbleR") install.packages(y) else devtools::install_github("maRce10/warbleR")
}
try(require(y, character.only = T), silent = T)
})
rm(list = ls())
load_all()
# reference
reference <- data.frame(sound.files = "1.wav",
selec = 1:5,
start = c(1, 2, 3, 4, 5),
end = c(1.5, 2.5, 3.5, 4.5, 5.5)
)
# detection
det <- data.frame(sound.files = "1.wav",
selec = 1:4,
start = c(0.75, 1.4, 3.2, 4.25),
end = c(1.25, 3.1, 4.1, 4.8)
)
# diagnose
diagnose_detection(reference = ref, detection = det)
# reference
ref <- data.frame(sound.files = "1.wav",
selec = 1:5,
start = c(1, 2, 3, 4, 5),
end = c(1.5, 2.5, 3.5, 4.5, 5.5)
)
# detection
det <- data.frame(sound.files = "1.wav",
selec = 1:4,
start = c(0.75, 1.4, 3.2, 4.25),
end = c(1.25, 3.1, 4.1, 4.8)
)
# diagnose
diagnose_detection(reference = ref, detection = det)
detection <- data.frame(sound.files = "1.wav",
selec = 1:2,
start = c(0.5, 3.5),
end = c(2.5, 5.1)
)
# diagnose
diagnose_detection(reference = ref, detection = det, time.diagnostics = T)
length(unique(
unlist(lapply(sub_detec$reference.row[grepl("merged)", sub_detec$detection.class)], function(x) unlist(strsplit(x, "-"))))))
a <- lapply(sub_detec$reference.row[grepl("merged)", sub_detec$detection.class)], function(x) table(unlist(strsplit(x, "-"))))
sapply(a, names)
x <- sub_detec$reference.row[grepl("merged)", sub_detec$detection.class)][1]
table(unlist(strsplit(x, "-")))
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::install()
x <- c("devtools", "fftw", "seewave", "pbapply", "RCurl", "rjson", "microbenchmark", "pkgdown", "warbleR")
aa <- lapply(x, function(y){
if(!y %in% installed.packages()[,"Package"])  {if(y != "warbleR") install.packages(y) else devtools::install_github("maRce10/warbleR")
}
try(require(y, character.only = T), silent = T)
})
rm(list = ls())
load_all()
# run internals
run_ohun_int <- function(){
out <- lapply(list.files(pattern = "ohun_int", path = "./R", full.names = T), source)}
# open working directory
open.wd <- function() system(paste("nautilus", getwd()), show.output.on.console = F)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a warbleR function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = TRUE, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE)
{
rfiles <- list.files(pattern = file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE){
rfiles <- list.files(pattern =file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, simulated = FALSE){
# setwd(path)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = extensible) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = extensible) #save sound files
if (simulated){
# Creating vector for duration
durs <- rep(c(0.3, 1), 5)
# Creating simulated song
set.seed(12)
simulated_1 <- warbleR::simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_1", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18)
sim_2 <- sim_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_2", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18, am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1))
sel_tab2 <- sel_tab1 <- simulated_1$selec.table
sel_tab2$sound.files <- gsub("_1", "_2", sel_tab2$sound.files)
sel_tab <- rbind(sel_tab1, sel_tab2)
return(sel_tab)
}
# if (other.formats){
#   file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
#
# file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
#
#   file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
#
# wav2flac(file.path(tempdir(), "Phae.long5.wav"))
#
# if (selection.table){
#
#   lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
#
#   sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
#
#   sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
#
#     sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
#
#     # fix times
#      sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
#
#      sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
#
#
#     sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
#
#     sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
#
#     sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
#
#
#     return(sub_tab)
# } else return(NULL)
# }
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
FUN <- "feature_reference"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
data("lbh_reference")
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# perfect detection
feature_reference(reference = lbh_reference)
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# by sound file
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE)
# by  sound file and including path
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE, path = tempdir())
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
reference = lbh_reference[, c(1:4)]
path = tempdir()
by.sound.file = FALSE
units = c("ms", "kHz")
digits = 2
if (is(reference, "extended_selection_table"))
stop2("The function is not defined for class 'extended_selection_table'. Use 'selection_table' or 'data.frame' instea.")
internal_feature_reference <- function(reference, path = NULL, total.annotations = FALSE){
reference$duration <- reference$end - reference$start
reference <- warbleR::gaps(X = reference, pb = FALSE)
count_annotations <- table(reference$sound.files)
output <- data.frame(min.sel.duration = min(reference$duration, na.rm = TRUE))
output$mean.sel.duration <- mean(reference$duration, na.rm = TRUE)
output$max.sel.duration <- max(reference$duration, na.rm = TRUE)
suppressWarnings(output$min.gap.duration <- min(reference$gaps, na.rm = TRUE))
suppressWarnings(output$mean.gap.duration <- mean(reference$gaps, na.rm = TRUE))
suppressWarnings(output$max.gap.duration <- max(reference$gaps, na.rm = TRUE))
if (total.annotations)
output$annotations <- nrow(reference) else
{
output$min.annotations <- min(count_annotations)
output$mean.annotations <- mean(count_annotations)
output$max.annotations <- max(count_annotations)}
# frequency range descriptors
if (!is.null(reference$bottom.freq) & !is.null(reference$top.freq)){
output$min.bottom.freq <- min(reference$bottom.freq, na.rm = TRUE)
output$mean.bottom.freq <- mean(reference$bottom.freq, na.rm = TRUE)
output$max.bottom.freq <- max(reference$bottom.freq, na.rm = TRUE)
output$min.top.freq <- min(reference$top.freq, na.rm = TRUE)
output$mean.top.freq <- mean(reference$top.freq, na.rm = TRUE)
output$max.top.freq <- max(reference$top.freq, na.rm = TRUE)
}
if (!is.null(path)){
durs <- warbleR::duration_sound_files(files = unique(reference$sound.files), path = path)
durs$duty.cycle <- sapply(1:nrow(durs), function(x)
sum(reference$duration[reference$sound.files == durs$sound.files[x]], na.rm = TRUE) / durs$duration[x]
)
output$min.duty.cycle <- min(durs$duty.cycle, na.rm = TRUE)
output$mean.duty.cycle <- mean(durs$duty.cycle, na.rm = TRUE)
output$max.duty.cycle <- max(durs$duty.cycle, na.rm = TRUE)
# measure peak amplitude
peak_amp <- warbleR::sound_pressure_level(reference, type = "peak", path = path, pb = FALSE)
output$min.peak.amplitude <- min(peak_amp$peak.amplitude, na.rm = TRUE)
output$mean.peak.amplitude <- mean(peak_amp$peak.amplitude, na.rm = TRUE)
output$max.peak.amplitude <- max(peak_amp$peak.amplitude, na.rm = TRUE)
}
return(output)
}
# force by.sound.files if only 1 sound file in reference
if (length(unique(reference$sound.files)) == 1)
by.sound.file <- TRUE
if (!by.sound.file)
output <- internal_feature_reference(reference, path, total.annotations = FALSE) else {
output_list <- lapply(unique(reference$sound.files), function(x){
sub_output <- internal_feature_reference(reference = reference[reference$sound.files == x, ], path, total.annotations = TRUE)
sub_output$sound.files <- x
return(sub_output)
})
output <- do.call(rbind, output_list)
output$mean.gap.duration[is.infinite(output$mean.gap.duration) | is.nan(output$mean.gap.duration)] <- NA
output$min.gap.duration[is.infinite(output$min.gap.duration) | is.nan(output$min.gap.duration)] <- NA
# order columns
output <- output[, c(ncol(output), 1:(ncol(output) - 1))]
}
x <- unique(reference$sound.files)[1]
x
sub_output <- internal_feature_reference(reference = reference[reference$sound.files == x, ], path, total.annotations = TRUE)
reference = reference[reference$sound.files == x, ]
total.annotations = TRUE
reference$duration <- reference$end - reference$start
reference <- warbleR::gaps(X = reference, pb = FALSE)
count_annotations <- table(reference$sound.files)
output <- data.frame(min.sel.duration = min(reference$duration, na.rm = TRUE))
output$mean.sel.duration <- mean(reference$duration, na.rm = TRUE)
output$max.sel.duration <- max(reference$duration, na.rm = TRUE)
suppressWarnings(output$min.gap.duration <- min(reference$gaps, na.rm = TRUE))
suppressWarnings(output$mean.gap.duration <- mean(reference$gaps, na.rm = TRUE))
suppressWarnings(output$max.gap.duration <- max(reference$gaps, na.rm = TRUE))
if (total.annotations)
output$annotations <- nrow(reference) else
{
output$min.annotations <- min(count_annotations)
output$mean.annotations <- mean(count_annotations)
output$max.annotations <- max(count_annotations)}
# frequency range descriptors
if (!is.null(reference$bottom.freq) & !is.null(reference$top.freq)){
output$min.bottom.freq <- min(reference$bottom.freq, na.rm = TRUE)
output$mean.bottom.freq <- mean(reference$bottom.freq, na.rm = TRUE)
output$max.bottom.freq <- max(reference$bottom.freq, na.rm = TRUE)
output$min.top.freq <- min(reference$top.freq, na.rm = TRUE)
output$mean.top.freq <- mean(reference$top.freq, na.rm = TRUE)
output$max.top.freq <- max(reference$top.freq, na.rm = TRUE)
}
if (!is.null(path)){
durs <- warbleR::duration_sound_files(files = unique(reference$sound.files), path = path)
durs$duty.cycle <- sapply(1:nrow(durs), function(x)
sum(reference$duration[reference$sound.files == durs$sound.files[x]], na.rm = TRUE) / durs$duration[x]
)
output$min.duty.cycle <- min(durs$duty.cycle, na.rm = TRUE)
output$mean.duty.cycle <- mean(durs$duty.cycle, na.rm = TRUE)
output$max.duty.cycle <- max(durs$duty.cycle, na.rm = TRUE)
# measure peak amplitude
peak_amp <- warbleR::sound_pressure_level(reference, type = "peak", path = path, pb = FALSE)
output$min.peak.amplitude <- min(peak_amp$peak.amplitude, na.rm = TRUE)
output$mean.peak.amplitude <- mean(peak_amp$peak.amplitude, na.rm = TRUE)
output$max.peak.amplitude <- max(peak_amp$peak.amplitude, na.rm = TRUE)
}
peak_amp
source("~/Dropbox/R_package_testing/ohun/R/feature_reference.R")
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# by sound file
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE)
# by  sound file and including path
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE, path = tempdir())
# by  sound file and including path
feature_reference(reference = lbh_reference, by.sound.file = TRUE, path = tempdir())
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
