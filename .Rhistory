table(ld$detection.class)
as.vector(table(ld$detection.class))
ld <- label_detection(reference = lsr, detection = lsr)
ld$detection.class
all(ld$detection.class) == "true.positive"
all(ld$detection.class == "true.positive")
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-label_detection.R")
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-label_detection.R")
# EXAMPLES
lsr <- selection_table(lbh_reference, path = tempdir())
# an extra one in detection (1 false positive)
ld <- label_detection(reference = lsr[-1, ], detection = lsr)
expect_true(is_selection_table(ld))
expect_true(nrow(ld) == 19)
nrow(ld)
as.vector(table(ld$detection.class))
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-label_detection.R")
merge_overlaps(lbh_reference)
mo <- merge_overlaps(lbh_reference)
is_selection_table(mo)
is_selection_table(mo)
nrow(mo)
# modified lbh_selec_table to make selections overlap
W <- lbh_reference[c(3,10), ]
end <- W$end
W$end <- W$end - 0.05
W$start <- W$start - 0.06
lbh_reference2 <- rbind(as.data.frame(lbh_reference[c(3, 10), ]), W)
lbh_reference2$selec <- 1:nrow(lbh_reference2)
# merging
merge_overlaps(X = lbh_reference2)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-merge_overlaps.R")
nrow(mo)
# merging
mo <- merge_overlaps(X = lbh_reference2)
mo
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-merge_overlaps.R")
# using smoothing and minimum duration
oed <- optimize_energy_detector(reference = lbh_reference, path = tempdir(), threshold = c(6, 20), hop.size = 6.8, peak.amplitude = 40,
bp = c(2, 9), min.duration = c(0.09, 0.1), by.sound.file = FALSE)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
# using smoothing and minimum duration
oed <- optimize_energy_detector(reference = lbh_reference, path = tempdir(), threshold = c(6, 20), hop.size = 6.8, peak.amplitude = 40,
bp = c(2, 9), min.duration = c(0.09, 0.1), by.sound.file = FALSE)
oed
is.data.frame(oed)
nrow(oed)
expect_true(all(oed$recall == 1))
all(oed$recall == 1)
all(oed$precision > 0.22)
oed <- optimize_energy_detector(reference = lbh_reference, threshold = 10, hold.time = c(15, 20), previous.output = oed,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
nrow(mo)
nrow(oed)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-optimize_energy_detector.R")
# using smoothing and minimum duration
oed <- optimize_energy_detector(reference = lbh_reference, path = tempdir(), threshold = c(6, 20), hop.size = 6.8, peak.amplitude = 40,
bp = c(2, 9), min.duration = c(0.09, 0.1), by.sound.file = FALSE)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-optimize_energy_detector.R")
# using smoothing and minimum duration
oed <- optimize_energy_detector(reference = lbh_reference, path = tempdir(), threshold = c(6, 20), hop.size = 6.8, peak.amplitude = 40,
bp = c(2, 9), min.duration = c(0.09, 0.1), by.sound.file = FALSE)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-optimize_energy_detector.R")
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[11, ]
# generate template correlations
tc <- template_correlator(templates = templ, path = tempdir())
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[11, ]
# generate template correlations
tc <- template_correlator(templates = templ, path = tempdir())
# using 2 threshold
optimize_template_detector(template.correlations = tc, reference = lbh_reference, threshold = c(0.2, 0.5, 0.9))
nrow(otp)
# using 2 threshold
otp <- optimize_template_detector(template.correlations = tc, reference = lbh_reference, threshold = c(0.2, 0.5, 0.9))
nrow(otp)
# using 2 threshold
otp <- optimize_template_detector(template.correlations = tc, reference = lbh_reference, threshold = c(0.2, 0.5, 0.6))
expect_true(is.data.frame(otp))
expect_true(nrow(otp) == 3)
otp
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-optimize_template_detector.R")
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
data("lbh_reference", "lbh1")
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[11, ]
# generate template correlations
tc <- template_correlator(templates = templ, path = tempdir())
# using 2 threshold
otp <- optimize_template_detector(template.correlations = tc, reference = lbh_reference, threshold = c(0.2, 0.5, 0.6))
is.data.frame(otp)
nrow(otp)
otp$f1.score
otp$f1.score > 0.74
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-optimize_template_detector.R")
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[c(1, 11), ]
# generate template correlations
tc <- template_correlator(templates = templ, path = tempdir())
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[c(1, 11), ]
# generate template correlations
tc <- template_correlator(templates = templ, path = tempdir())
# using 2 threshold
otp <- optimize_template_detector(template.correlations = tc, reference = lbh_reference, threshold = c(0.2, 0.5, 0.6))
nrow(otp)
otp$f1.score
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-optimize_template_detector.R")
data("lbh_reference", "lbh1")
# template for the first sound file in 'lbh_reference'
templ1 <- lbh_reference[1, ]
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir(), files = "Phae.long1.wav")
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
data("lbh_reference", "lbh1")
# template for the first sound file in 'lbh_reference'
templ1 <- lbh_reference[1, ]
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir(), files = "Phae.long1.wav")
# template detection
td <- template_detector(template.correlations = tc, threshold = 0.4)
td
is.data.frame(td)
is_selection_table(td)
nrow(td)
data("lbh_reference", "lbh1")
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[c(1, 11), ]
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir(), files = "Phae.long1.wav")
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
data("lbh_reference", "lbh1")
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[c(1, 11), ]
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir(), files = "Phae.long1.wav")
templ1
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir(), files = "Phae.long1.wav")
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir())
# template detection
td <- template_detector(template.correlations = tc, threshold = 0.4)
is.data.frame(td)
is_selection_table(td)
nrow(td)
data("lbh_reference", "lbh1")
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[c(1, 11), ]
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir())
# template detection
td <- template_detector(template.correlations = tc, threshold = 0.4)
td
nrow(td)
# generate template correlations
tc <- template_correlator(templates = templ, path = tempdir())
# template detection
td <- template_detector(template.correlations = tc, threshold = 0.4)
nrow(td)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-template_detector.R")
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
#split files in 1 s files
split_acoustic_data(sgmt.dur = 1, path = tempdir())
#split files in 1 s files
sad <- split_acoustic_data(sgmt.dur = 1, path = tempdir())
# Check this folder
list.files(path = tempdir(), pattern = ".wav$")
nrow(sad)
length(fls)
# Check this folder
fls <- list.files(path = tempdir(), pattern = ".wav$")
length(fls)
nrow(sad)
#split files in 1 s files
sad <- split_acoustic_data(sgmt.dur = 1, path = tempdir())
sad
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
#split files in 1 s files
sad <- split_acoustic_data(sgmt.dur = 1, path = tempdir())
# Check this folder
fls <- list.files(path = tempdir(), pattern = ".wav$")
fls
nrow(sad)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
#split files in 1 s files
sad <- split_acoustic_data(sgmt.dur = 1, path = tempdir(), X = lbh_reference)
source("~/Dropbox/R_package_testing/ohun/R/split_acoustic_data.R")
#split files in 1 s files
sad <- split_acoustic_data(sgmt.dur = 1, path = tempdir(), X = lbh_reference)
sad
# Check this folder
fls <- list.files(path = tempdir(), pattern = ".wav$")
fls
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
nrow(sad)
sad
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-split_acoustic_data.R")
is_selection_table(sad)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-split_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-split_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-split_acoustic_data.R")
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
data("lbh_reference")
#split files in 1 s files
sad <- split_acoustic_data(sgmt.dur = 1, path = tempdir(), X = lbh_reference)
# Check this folder
fls <- list.files(path = tempdir(), pattern = ".wav$")
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
expect_true(is.data.frame(sad))
nrow(sad)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-split_acoustic_data.R")
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE, path = tempdir())
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE, path = tempdir())
# get summary
summarize_diagnostic(dd)
is.data.frame(sd)
sd
# get summary
sdai <- summarize_diagnostic(dd)
is.data.frame(sdai)
nrow(sdai)
ncol(sdai)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-summarize_diagnostic.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-energy_detector.R")
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-filter_detection.R")
# template for the first sound file in 'lbh_reference'
templ1 <- lbh_reference[1, ]
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir(), files = "lbh1.wav")
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
# template for the first sound file in 'lbh_reference'
templ1 <- lbh_reference[1, ]
# generate template correlations
tc <- template_correlator(templates = templ1, path = tempdir(), files = "lbh1.wav")
# template detection
td <- template_detector(template.correlations = tc, threshold = 0.12)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-get_templates.R")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
expect_true(is.list(template))
is.data.frame(template)
nrow(template)
# with custom acoustic space
spectral_parameters <- spectro_analysis(lbh_reference, path = tempdir())
# remove columns with NAs
spectral_parameters <- spectral_parameters[, !sapply(spectral_parameters, anyNA)]
# get PCA
pca <- stats::prcomp(spectral_parameters[, 2:27], scale. = TRUE)
template <- get_templates(reference = lbh_reference, n.sub.spaces = 4, acoustic.space = pca$x[, 1:2], path = tempdir())
is_selection_table(template)
nrow(template)
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-get_templates.R")
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE) #save sound files
data("lbh_reference", "lbh1")
# template for the fourth sound file in 'lbh_reference'
templ <- lbh_reference[c(1, 11), ]
# generate template correlations
tc <- template_correlator(templates = templ, path = tempdir())
# template detection
td <- template_detector(template.correlations = tc, threshold = 0.4)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
expect_true(is.data.frame(td))
source("~/Dropbox/R_package_testing/ohun/tests/testthat.R")
devtools::test()
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
devtools::test()
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/energy_detector.R")
devtools::test()
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
