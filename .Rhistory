pol
pol = st_polygon(
list(as.matrix(pol_df_closed))
)
sf::st_overlaps(pts, pol)
pts
pol
pts <- st_as_sf(x = data.frame(x = space[ , 1], y = space[ , 2]),
coords = c("x", "y"))
sf::st_overlaps(pts, pol)
overlp
overlp <- sf::st_overlaps(pts, pol)
is.na(overlp)
sp::over(x = sp::SpatialPoints(space[, 1:2]),  y = sp::SpatialPolygons(polys[[i]]@polygons), returnList = FALSE))
sp::over(x = sp::SpatialPoints(space[, 1:2]),  y = sp::SpatialPolygons(polys[[i]]@polygons), returnList = FALSE)))
sp::over(x = sp::SpatialPoints(space[, 1:2]),  y = sp::SpatialPolygons(polys[[i]]@polygons), returnList = FALSE)
pts
pol
overlp <- sf::st_intersects(pts, pol)
overlp
which(overlp)
which(overlp == 1)
overlp
overlp[[1]]
str(overlp[[1]])
str(overlp)
overlp <- sf::st_intersects(pts, pol, sparse = FALSE)
overlp
overlp
which(overlp == 1)
whch_within
intrsect <- which(sf::st_intersects(pts, pol, sparse = FALSE) == 1)
whch_within <- which(sf::st_intersects(pts, pol, sparse = FALSE) == 1)
whch_within
sub_space <- space[whch_within, ]
# get centroid
centroid_coors <- colMeans(sub_space[, 1:2])
# and distance to centroid
dists_to_centroid <-
unlist(lapply(seq_len(nrow(sub_space)), function(x)
stats::dist(
rbind(sub_space[x, 1:2], centroid_coors)
)))
centroid <- sub_space$...NROW[which.min(dists_to_centroid)]
centroids[i + 1] <- centroid
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
polys <- lapply(1:nx, function(i){
n <- max(2, floor(100 * dx[i])) # 100 equivalent to edges in pie()
P <- t2xy(seq.int(x[i], x[i + 1], length.out = n))
if (plot)
lines(c(P$x[1], 0) + mean_dim1, c(P$y[1], 0) + mean_dim2, lty = 3, col = "gray", lwd = 3)
pol_df <- data.frame(x = c(P$x, 0), y = c(P$y, 0))
# poly <- sp::Polygons(list(sp::Polygon(pol_df)), ID = 1)
# spp <- sp::SpatialPolygons(list(poly))
pol_df_closed <- rbind(pol_df[nrow(pol_df),], pol_df)
poly <- st_polygon(
list(as.matrix(pol_df_closed))
)
return(poly)
}) else polys <- vector()
# get polygon for each sub space
if (n.sub.spaces > 1)
polys <- lapply(1:nx, function(i){
n <- max(2, floor(100 * dx[i])) # 100 equivalent to edges in pie()
P <- t2xy(seq.int(x[i], x[i + 1], length.out = n))
if (plot)
lines(c(P$x[1], 0) + mean_dim1, c(P$y[1], 0) + mean_dim2, lty = 3, col = "gray", lwd = 3)
pol_df <- data.frame(x = c(P$x, 0), y = c(P$y, 0))
# poly <- sp::Polygons(list(sp::Polygon(pol_df)), ID = 1)
# spp <- sp::SpatialPolygons(list(poly))
pol_df_closed <- rbind(pol_df[nrow(pol_df),], pol_df)
poly <- st_polygon(
list(as.matrix(pol_df_closed))
)
return(poly)
}) else polys <- vector()
polys
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir(), color = "red")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
FUN <- "get_templates"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf.img()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
data("lbh_reference")
list.files(tempdir(), pattern = ".wav")
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, path = tempdir())
# with custom acoustic space
spectral_parameters <- spectro_analysis(lbh_reference, path = tempdir())
# remove columns with NAs
spectral_parameters <- spectral_parameters[, !sapply(spectral_parameters, anyNA)]
# get PCA
pca <- stats::prcomp(spectral_parameters[, 2:27], scale. = TRUE)
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, acoustic.space = pca$x[, 1:2], path = tempdir())
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, acoustic.space = pca$x[, 1:2], path = tempdir())
template
# get PCA
pca <- stats::prcomp(spectral_parameters[, 2:6], scale. = TRUE)
template <- get_templates(reference = lbh_reference, n.sub.spaces =  3, acoustic.space = pca$x[, 1:2], path = tempdir())
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
usethis::use_github_action("pkgdown")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# get mean structure template
template <-
get_templates(reference = lbh1_reference, path = tempdir())
par(mar = c(5, 4, 1, 1))
# get mean structure template
template <-
get_templates(reference = lbh1_reference, path = tempdir())
# Chunk 2: global options
#load package
library(ohun)
load("../data/lbh2.rda")
# Chunk 2: global options
#load package
library(ohun)
load("./data/lbh2.rda")
load("./data/lbh1.rda")
load("./data/lbh_reference.rda")
# for spectrograms
par(mar = c(5, 4, 2, 2) + 0.1)
stopifnot(require(knitr))
options(width = 90)
opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
# eval = if (isTRUE(exists("params"))) params$EVAL else FALSE,
dev = "jpeg",
dpi = 100,
fig.asp = 0.4,
fig.width = 6.5,
out.width = "100%",
fig.align = "center"
)
# Chunk 3
# load example data
data("lbh1", "lbh2", "lbh_reference")
lbh_reference
# Chunk 4
# convert to data frame
as.data.frame(lbh_reference)
# Chunk 5
# save sound file
writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
# save sound file
writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
# print spectrogram
label_spectro(wave = lbh1, reference = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ], hop.size = 10, ovlp = 50, flim = c(1, 10))
# print spectrogram
label_spectro(wave = lbh2, reference = lbh_reference[lbh_reference$sound.files == "lbh2.wav", ], hop.size = 10, ovlp = 50, flim = c(1, 10))
# Chunk 6
lbh1_reference <-
lbh_reference[lbh_reference$sound.files == "lbh1.wav",]
# diagnose
diagnose_detection(reference = lbh1_reference, detection = lbh1_reference)[, c(1:3, 7:9)]
# Chunk 7
# create new table
lbh1_detection <- lbh1_reference[3:9,]
# print spectrogram
label_spectro(
wave = lbh1,
reference = lbh1_reference,
detection = lbh1_detection,
hop.size = 10,
ovlp = 50,
flim = c(1, 10)
)
# diagnose
diagnose_detection(reference = lbh1_reference, detection = lbh1_detection)[, c(1:3, 7:9)]
# Chunk 8
# print spectrogram
label_spectro(
wave = lbh1,
detection = lbh1_reference,
reference = lbh1_detection,
hop.size = 10,
ovlp = 50,
flim = c(1, 10)
)
# diagnose
diagnose_detection(reference = lbh1_detection, detection = lbh1_reference)[, c(1:3, 7:9)]
# Chunk 9
# create new table
lbh1_detection <- lbh1_reference
# add 'noise' to start
set.seed(18)
lbh1_detection$start <-
lbh1_detection$start + rnorm(nrow(lbh1_detection), mean = 0, sd = 0.1)
## print spectrogram
label_spectro(
wave = lbh1,
reference = lbh1_reference,
detection = lbh1_detection,
hop.size = 10,
ovlp = 50,
flim = c(1, 10)
)
# diagnose
diagnose_detection(reference = lbh1_reference, detection = lbh1_detection)
# Chunk 10
# diagnose with time diagnostics
diagnose_detection(reference = lbh1_reference[-1, ], detection = lbh1_detection[-10, ], time.diagnostics = TRUE)
# Chunk 11
# diagnose by sound file
diagnostic <-
diagnose_detection(reference = lbh1_reference,
detection = lbh1_detection,
by.sound.file = TRUE)
diagnostic
# Chunk 12
# summarize
summarize_diagnostic(diagnostic)
# Chunk 13
# plot spectrogram and envelope
label_spectro(
wave = cutw(
lbh1,
from = 0,
to = 1.5,
output = "Wave"
),
ovlp = 90,
hop.size = 10,
flim = c(0, 10),
envelope = TRUE
)
# Chunk 14
# install this package first if not installed
# install.packages("Sim.DiffProc")
#Creating vector for duration
durs <- rep(c(0.3, 1), 5)
#Creating simulated song
set.seed(12)
simulated_1 <-
warbleR::simulate_songs(
n = 10,
durs = durs,
freqs = 5,
sig2 = 0.01,
gaps = 0.5,
harms = 1,
bgn = 0.1,
path = tempdir(),
file.name = "simulated_1",
selec.table = TRUE,
shape = "cos",
fin = 0.3,
fout = 0.35,
samp.rate = 18
)$wave
# Chunk 15
# plot spectrogram and envelope
label_spectro(wave = simulated_1,
env = TRUE,
fastdisp = TRUE)
# Chunk 16
# run detection
detection <-
energy_detector(
files = "simulated_1.wav",
bp = c(2, 8),
threshold = 50,
smooth = 150,
path = tempdir()
)
# plot spectrogram and envelope
label_spectro(
wave = simulated_1,
envelope = TRUE,
detection = detection,
threshold = 50
)
# Chunk 17
detection
# Chunk 18
# run detection
detection <-
energy_detector(
files = "simulated_1.wav",
bp = c(1, 8),
threshold = 50,
min.duration = 500,
smooth = 150,
path = tempdir()
)
# plot spectrogram
label_spectro(wave = simulated_1, detection = detection)
# Chunk 19
# run detection
detection <- energy_detector(files = "simulated_1.wav", bp = c(1, 8),  threshold = 50, smooth = 150, max.duration = 500, path = tempdir())
# plot spectrogram
label_spectro(wave = simulated_1,  detection = detection)
# Chunk 20
# Detecting
detection <- energy_detector(files = "simulated_1.wav", bp = c(5, 8), threshold = 50, smooth = 150, path = tempdir())
# plot spectrogram
label_spectro(wave = simulated_1,  detection = detection)
# Chunk 21
# Detect
detection <-
energy_detector(
files = "simulated_1.wav",
bp = c(0, 6),
threshold = 50,
min.duration = 1,
smooth = 150,
path = tempdir()
)
# plot spectrogram
label_spectro(wave = simulated_1,  detection = detection)
# Chunk 22
#Creating simulated song
set.seed(12)
#Creating vector for duration
durs <- rep(c(0.3, 1), 5)
sim_2 <-
sim_songs(
n = 10,
durs = durs,
freqs = 5,
sig2 = 0.01,
gaps = 0.5,
harms = 1,
bgn = 0.1,
path = tempdir(),
file.name = "simulated_2",
selec.table = TRUE,
shape = "cos",
fin = 0.3,
fout = 0.35,
samp.rate = 18,
am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1)
)
# extract wave object and selection table
simulated_2 <- sim_2$wave
sim2_sel_table <- sim_2$selec.table
# plot spectrogram
label_spectro(wave = simulated_2, envelope = TRUE)
# Chunk 23
# detect sounds
detection <- energy_detector(files = "simulated_2.wav", threshold = 50, path = tempdir())
# plot spectrogram
label_spectro(wave = simulated_2, envelope = TRUE, threshold = 50, detection = detection)
# Chunk 24
# detect sounds
detection <-
energy_detector(
files = "simulated_2.wav",
threshold = 50,
min.duration = 1,
path = tempdir(),
hold.time = 200
)
# plot spectrogram
label_spectro(
wave = simulated_2,
envelope = TRUE,
threshold = 50,
detection = detection
)
# Chunk 25
# detect sounds
detection <-
energy_detector(
files = "simulated_2.wav",
threshold = 50,
min.duration = 1,
path = tempdir(),
smooth = 350
)
# plot spectrogram
label_spectro(
wave = simulated_2,
envelope = TRUE,
threshold = 50,
detection = detection,
smooth = 350
)
# Chunk 26
optim_detection <-
optimize_energy_detector(
reference = sim2_sel_table,
files = "simulated_2.wav",
threshold = 50,
min.duration = 1,
path = tempdir(),
smooth = c(100, 250, 350)
)
optim_detection[, c(1, 2:5, 7:12, 17:18)]
# Chunk 27
feature_reference(reference = lbh_reference, path = tempdir())
par(mar = c(5, 4, 1, 1))
# get mean structure template
template <-
get_templates(reference = lbh1_reference, path = tempdir())
# get 3 templates
template <- get_templates(reference = lbh_reference, n.sub.spaces = 3, path = tempdir())
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
