# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
## pckgcheck
x <- pkgcheck::pkgcheck(".")
install.packages ("pkgcheck")
remotes::install_github ("ropensci-review-tools/pkgcheck")
## pckgcheck
x <- pkgcheck::pkgcheck(".")
ctags_test ()
ctags_test()
remotes::install_github ("ropensci-review-tools/pkgstats")
library(pkgstats)
ctags_test()
ctags_install()
ctags_test()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
install.packages("visNetwork")
## pckgcheck
x <- pkgcheck::pkgcheck(".")
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(X)
summary(x)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
use_test("internal_functions")
library("testthat")
use_test("internal_functions")
usethis::use_test("internal_functions")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
test_that("stop2", {
capture_output(stop2("stop!"))
})
capture_output(stop2("stop!"))
capture_output(stop2("stop!"))
capture_error(stop2("stop!"))
x ;' capture_error(stop2("stop!"))
})
x <- capture_error(stop2("stop!"))
x <- capture_error(stop2("stop!"))
x
test_that("stop2", {
x <- capture_error(stop2("stop!"))
expect_equal(x, "<simpleError: stop!>")
})
class(x)
test_that("stop2", {
# x <- capture_error()
expect_error(stop2("stop!"))
})
test_that("stop2", {
expect_error(stop2("stop!"))
})
test_that("stop2", {
expect_warning(warning2("warning!"))
})
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
covr::codecov(token = "8df6a17e-aff7-4a6d-bdf7-ecc38aea7e71")
#codecov
use_this::use_coverage(type = c("codecov"))
install.packages("use_this")
#codecov
usethis::use_coverage(type = c("codecov"))
covr::codecov(token = "8df6a17e-aff7-4a6d-bdf7-ecc38aea7e71")
covr::codecov(token = "8df6a17e-aff7-4a6d-bdf7-ecc38aea7e71")
data(list = "lbh1", "lbh_reference")
# adding labels
label_spectro(wave = lbh1,
reference = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ],
wl = 200, ovlp = 50, flim = c(1, 10))
# adding envelope
a <- label_spectro(wave = lbh1,
detection = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ],
wl = 200, ovlp = 50, flim = c(1, 10))
a
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-label_spectro.R")
ref <- data.frame(sound.files = "1.wav",
start = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
end = c(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5)
)
ref$selec <- 1:nrow(ref)
# detection
det <- data.frame(sound.files = "1.wav",
start = c(0.75, 1.4, 3.2, 4.25, 6.2, 7.1, 8.25, 1),
end = c(1.25, 3.1, 4.1, 4.8, 6.5, 7.5, 9.25, 1.5)
)
det$selec <- 1:nrow(det)
# diagnose
label_detection(reference = ref, detection = det)
# diagnose
ld <- label_detection(reference = ref, detection = det)
diagnose_detection(reference = ref, detection = det, by.sound.file = TRUE)
sum(ld$detection.class == "true.positive")
source("~/Dropbox/R_package_testing/ohun/tests/testthat/test-label_detection.R")
covr::codecov(token = "8df6a17e-aff7-4a6d-bdf7-ecc38aea7e71")
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
codemetar::write_codemeta()
install.packages("codemetar")
codemetar::write_codemeta()
# generate codemeta.json (only run once)
# codemetar::write_codemeta()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
# set up continuous integration
usethis::use_appveyor()
use_github_actions()
usethis::use_github_actions()
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
usethis::use_appveyor()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(pkgcheck::pkgcheck("."))
# install.packages("remotes")
remotes::install_github("r-hub/rhub")
library(rhub)
validate_email()
# rhub
# remotes::install_github("r-hub/rhub")
# rhub::validate_email()
rhub::check()
ccran <- rhub::check_for_cran()
ccran
ccran <- rhub::check_on_windows()
ccran <- rhub::check_on_macos()
usethis::
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
usethis::use_circleci_badge()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
tic::use_tic()
install.packages("tic")
remotes::install_github("ropensci/tic")
tic::use_tic()
usethis::create_github_token()
usethis::create_github_token()
gitcreds::gitcreds_set("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")
gitcreds::gitcreds_set()
tic::use_tic()
install.packages("sodium")
install.packages("sodium")
tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
# tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
# tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
# tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
Sys.setenv("GITHUB_TOKEN" = "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")
# tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
mydir <- file.path (tempdir (), "ohun")
gert::git_clone ("https://github.com/maRce10/ohun.git", path = mydir)
x <- pkgcheck (mydir)
x <- pkgcheck::pkgcheck(mydir)
summary(x)
# tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
# tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
# tic::use_tic()
## pckgcheck
x <- pkgcheck::pkgcheck(".")
summary(x)
path = "."
goodpractice = TRUE
use_cache = TRUE
extra_env = .GlobalEnv
pkgcheck_extra_env = extra_env
path <- convert_path(path)
# tic::use_tic()
## pckgcheck
library(pkgcheck)
path <- convert_path(path)
path <- convert_path(path)
checks <- pkgcheck_object()
checks$pkg <- s$out[c("name", "path", "version", "url",
"BugReports", "license", "summary", "dependencies")]
library(pkgcheck)
checks <- pkgcheck_object()
pkgcheck:::pkgchk_ci_badges()
u <- pkginfo_url_from_desc(path, type = "URL")
x
x
x$checks
pkgcheck:::summarise_check(x)
pkgcheck:::summarise_all_checks()
pkgcheck:::summarise_all_checks(x)
checks ;' x'
checks <- x
pkg_env <- asNamespace("pkgcheck")
pkg_fns <- ls(pkg_env)
output_fns <- gsub("^output\\_pkgchk\\_", "", grep("^output\\_pkgchk\\_",
pkg_fns, value = TRUE))
has_gp <- "goodpractice" %in% names(checks)
has_gp
if (!has_gp) {
output_fns <- output_fns[which(!grepl("covr", output_fns))]
}
ordered_checks <- order_checks(output_fns)
ordered_checks <- pkgcheck:::order_checks(output_fns)
out <- lapply(ordered_checks, function(i) summarise_check(checks,
i, pkg_env))
out <- lapply(ordered_checks, function(i) pkgcheck:::summarise_check(checks,
i, pkg_env))
ordered_checks
i <- "ci"
pkgcheck:::summarise_check(checks,
i, pkg_env))
pkgcheck:::summarise_check(checks,
i, pkg_env)
pkg_fns <- ls(pkg_env)
what <- i
summary_fn <- paste0("output_pkgchk_", what)
summary_fn %in% pkg_fns
list(checks)
chk_summary <- do.call(summary_fn, list(checks), envir = pkg_env)
chk_summary
pkg_env$ci_results_gh()
pkg_env$ci_results_gh(".")
pkg_env$ci_results_gh
## pckgcheck
summary(pkgcheck::pkgcheck("."))
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
usethis::use_github_actions_badge()
covr::codecov(token = "8df6a17e-aff7-4a6d-bdf7-ecc38aea7e71")
# generate codemeta.json (only run once)
codemetar::write_codemeta()
#codecov
usethis::use_coverage(type = c("codecov"))
covr::codecov(token = "8df6a17e-aff7-4a6d-bdf7-ecc38aea7e71")
use_github_action("test-coverage")
usethis::use_github_action("test-coverage")
ui_todo("\n    Call {ui_code('use_github_action(\"test-coverage\")')} to continuously \\\n    monitor test coverage.")
usethis::use_testthat(3)
getwd()
test_check("warbleR")
remove.packages("ohun")
#
# #restart R
.rs.restartR()
# devtools::install()
pkgs <- c("remotes", "devtools", "fftw", "seewave", "pbapply", "RCurl", "rjson", "kableExtra", "knitr", "formatR", "rprojroot", "xaringanExtra" ,"microbenchmark", "pkgdown", "maRce10/warbleR", "covr", "pkgcheck", "visNetwork", "codemetar", "ropensci-review-tools/pkgstats", "ropensci/tic")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
rm(list = ls())
# install ctags
# first run in terminal: sudo apt install lsb-core
# then run this with sudo privilege
ctags_install(bin_dir = NULL, sudo = TRUE)
load_all()
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
