# by sound file
feature_reference(reference = lbh_reference, by.sound.file = TRUE)
# by  sound file and including path
feature_reference(reference = lbh_reference, by.sound.file = TRUE, path = tempdir())
# by  sound file and including path changing units
feature_reference(reference = lbh_reference, by.sound.file = TRUE, path = tempdir(), units = c("s", "Hz"))
# by  sound file and including path changing units and digits
feature_reference(reference = lbh_reference, by.sound.file = TRUE, path = tempdir(), units = c("s", "Hz"), digits = 4)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
pkgdown::build_articles()
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/feature_reference.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
pkgdown::build_articles()
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/split_acoustic_data.R")
# devtools::install()
x <- c("devtools", "fftw", "seewave", "pbapply", "RCurl", "rjson", "microbenchmark", "pkgdown", "warbleR")
aa <- lapply(x, function(y){
if(!y %in% installed.packages()[,"Package"])  {if(y != "warbleR") install.packages(y) else devtools::install_github("maRce10/warbleR")
}
try(require(y, character.only = T), silent = T)
})
rm(list = ls())
load_all()
# run internals
run_ohun_int <- function(){
out <- lapply(list.files(pattern = "ohun_int", path = "./R", full.names = T), source)}
# open working directory
open.wd <- function() system(paste("nautilus", getwd()), show.output.on.console = F)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a warbleR function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = TRUE, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE)
{
rfiles <- list.files(pattern = file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE){
rfiles <- list.files(pattern =file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, simulated = FALSE){
# setwd(path)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = extensible) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = extensible) #save sound files
if (simulated){
# Creating vector for duration
durs <- rep(c(0.3, 1), 5)
# Creating simulated song
set.seed(12)
simulated_1 <- warbleR::simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_1", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18)
sim_2 <- sim_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_2", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18, am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1))
sel_tab2 <- sel_tab1 <- simulated_1$selec.table
sel_tab2$sound.files <- gsub("_1", "_2", sel_tab2$sound.files)
sel_tab <- rbind(sel_tab1, sel_tab2)
return(sel_tab)
}
# if (other.formats){
#   file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
#
# file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
#
#   file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
#
# wav2flac(file.path(tempdir(), "Phae.long5.wav"))
#
# if (selection.table){
#
#   lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
#
#   sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
#
#   sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
#
#     sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
#
#     # fix times
#      sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
#
#      sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
#
#
#     sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
#
#     sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
#
#     sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
#
#
#     return(sub_tab)
# } else return(NULL)
# }
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
data("lbh_reference")
# save wav file examples
write.sound.files()
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
# missing one in detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference[-1, ], time.diagnostics = TRUE)
lbh_selec2$iter <- "first"
lbh_reference$iter <- "second"
ref <- rbind(lbh_reference, lbh_selec2)
lbh_selec2$iter <- "first"
# merged detection
lbh_selec2 <- lbh_reference
lbh_selec2$end[11] <- 3
lbh_selec2$end[12] <- 3
lbh_selec2$iter <- "first"
lbh_reference$iter <- "second"
ref <- rbind(lbh_reference, lbh_selec2)
ref <- rbind(as.data.frame(lbh_reference), as.data.frame(lbh_selec2))
ref
det <- rbind(as.data.frame(lbh_reference), as.data.frame(lbh_selec2))
performance_df <- do.call(rbind(lapply(split(detection, f = by), function(x) diagnose_detection(reference = lbh_reference, detection = det))))
performance_df <- do.call(rbind, lapply(split(detection, f = by), function(x) diagnose_detection(reference = lbh_reference, detection = det))))
performance_df <- do.call(rbind, lapply(split(detection, f = by), function(x) diagnose_detection(reference = lbh_reference, detection = det)))
det <- rbind(as.data.frame(lbh_reference), as.data.frame(lbh_selec2))
split(detection, f = by)
split(det, f = by)
by
by <- "iter"
split(det, f = by)
performance_df <- do.call(rbind, lapply(split(det, f = by), function(x) diagnose_detection(reference = lbh_reference, detection = x)))
performance_df
split(det, f = by)
lbh_reference$iter  <- as.factor(lbh_reference$iter )
split(det, f = by)
split(det, by)
det[, by]
split(x = det, f = det[, by])
performance_df <- do.call(rbind, lapply(split(x = det, f = det[, by]), function(x) diagnose_detection(reference = lbh_reference, detection = x)))
performance_df
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
diagnose_detection(reference = lbh_reference, detection = det, by = "iter")
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
diagnose_detection(reference = lbh_reference, detection = det, by = "iter")
diagnose_detection(reference = lbh_selec2, detection = lbh_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
split_X <- split(x = det, f = det[, by])
split_diagnostic <- warbleR:::pblapply_wrblr_int(X = split_X, cl = 1, pbar = pb, FUN = function(x) diagnose_detection(reference = lbh_reference, detection = x, pb = FALSE, parallel = parallel, time.diagnostics = time.diagnostics, path = path, by.sound.file = by.sound.file))
split_diagnostic
x = 1
by_diag <- diagnose_detection(reference = lbh_reference, detection = split_X[[x]], pb = FALSE, parallel = parallel, time.diagnostics = time.diagnostics, path = path, by.sound.file = by.sound.file)
# add by label
by_diag$by <- names(split_X)[x]
# order columns
by_diag <- by_diag[, c(ncol(by_diag), 1:(ncol(by_diag) - 1))]
by_diag
split_X <- split(x = det, f = det[, by])
split_diagnostic <- warbleR:::pblapply_wrblr_int(X = 1:length(split_X), cl = 1, pbar = pb, FUN = function(x) {
by_diag <- diagnose_detection(reference = lbh_reference, detection = split_X[[x]], pb = FALSE, parallel = parallel, time.diagnostics = time.diagnostics, path = path, by.sound.file = by.sound.file)
# add by label
by_diag$by <- names(split_X)[x]
# order columns
by_diag <- by_diag[, c(ncol(by_diag), 1:(ncol(by_diag) - 1))]
})
performance_df <- do.call(rbind, split_diagnostic)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
# missing one in detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_reference[-1, ], detection = lbh_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_reference, detection = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_reference, detection = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# with path
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE, path = tempdir())
# get summary
summarize_diagnostic(dd)
# merged detection
lbh_selec2 <- lbh_reference
lbh_selec2$end[11] <- 3
lbh_selec2$end[12] <- 3
diagnose_detection(reference = lbh_selec2, detection = lbh_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
lbh_selec2$iter <- "first"
lbh_reference$iter <- "second"
lbh_reference$iter  <- as.factor(lbh_reference$iter )
det <- rbind(as.data.frame(lbh_reference), as.data.frame(lbh_selec2))
by <- "iter"
if (!is.null(by))
performance_df <- do.call(rbind, lapply(split(x = det, f = det[, by]), function(x) diagnose_detection(reference = lbh_reference, detection = x)))
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by)
lbh_reference
split_diagnostic <- warbleR:::pblapply_wrblr_int(X = 1:length(split_X), cl = 1, pbar = pb, FUN = function(x) {
by_diag <- diagnose_detection(reference = lbh_reference, detection = split_X[[x]], pb = FALSE, parallel = parallel, time.diagnostics = time.diagnostics, path = path, by.sound.file = by.sound.file)
# add by label
by_diag$by <- names(split_X)[x]
# order columns
by_diag <- by_diag[, c(ncol(by_diag), 1:(ncol(by_diag) - 1))]
})
performance_df <- do.call(rbind, split_diagnostic)
performance_df
diagnose_detection(reference = lbh_reference, detection = det, by = "iter")
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = FALSE)
FALSE
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE)
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE)
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE, parallel = 2)
dd <- diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE, parallel = 2)
dd <- diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE, parallel = 2)
dd
summarize_diagnostic(dd)
dd <- diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = F, pb = FALSE, parallel = 2)
dd
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
dd <- diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE, parallel = 2)
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE, parallel = 2)
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = FALSE, pb = FALSE, parallel = 2)
# by sound file
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = FALSE, pb = FALSE, parallel = 2)
# by sound file
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE, parallel = 2)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
data("lbh_reference")
# save wav file examples
write.sound.files()
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
# merged detection
lbh_selec2 <- lbh_reference
lbh_selec2$end[11] <- 3
lbh_selec2$end[12] <- 3
diagnose_detection(reference = lbh_selec2, detection = lbh_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
# using "by"
lbh_selec2$iter <- "first"
lbh_reference$iter <- "second"
lbh_reference$iter  <- as.factor(lbh_reference$iter )
det <- rbind(as.data.frame(lbh_reference), as.data.frame(lbh_selec2))
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = FALSE, pb = FALSE, parallel = 2)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = FALSE, pb = FALSE, parallel = 2)
# by sound file
diagnose_detection(reference = lbh_reference, detection = det, by = "iter", by.sound.file = TRUE, pb = FALSE, parallel = 2)
